/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalSocialRequestParser;
import org.xtext.example.mydsl.services.SocialRequestGrammarAccess;

public class SocialRequestParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SocialRequestGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SocialRequestGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeReferenceAccess().getAlternatives(), "rule__TypeReference__Alternatives");
			builder.put(grammarAccess.getModifierAccess().getAlternatives(), "rule__Modifier__Alternatives");
			builder.put(grammarAccess.getValidationAccess().getAlternatives(), "rule__Validation__Alternatives");
			builder.put(grammarAccess.getBASICVALIDATIONAccess().getAlternatives(), "rule__BASICVALIDATION__Alternatives");
			builder.put(grammarAccess.getASSOCIATIONAccess().getAlternatives(), "rule__ASSOCIATION__Alternatives");
			builder.put(grammarAccess.getGenerationTypeAccess().getAlternatives(), "rule__GenerationType__Alternatives");
			builder.put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
			builder.put(grammarAccess.getJoinTypeAccess().getAlternatives(), "rule__JoinType__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_2(), "rule__Entity__Group_2__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup_5(), "rule__Attribute__Group_5__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup_5_1_0(), "rule__Attribute__Group_5_1_0__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup_5_1_1(), "rule__Attribute__Group_5_1_1__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup_5_1_2(), "rule__Attribute__Group_5_1_2__0");
			builder.put(grammarAccess.getModifierAccess().getGroup_2(), "rule__Modifier__Group_2__0");
			builder.put(grammarAccess.getModifierAccess().getGroup_2_1(), "rule__Modifier__Group_2_1__0");
			builder.put(grammarAccess.getValidationAccess().getGroup_0(), "rule__Validation__Group_0__0");
			builder.put(grammarAccess.getValidationAccess().getGroup_1(), "rule__Validation__Group_1__0");
			builder.put(grammarAccess.getValidationAccess().getGroup_2(), "rule__Validation__Group_2__0");
			builder.put(grammarAccess.getRepositoryAccess().getGroup(), "rule__Repository__Group__0");
			builder.put(grammarAccess.getQueryAccess().getGroup(), "rule__Query__Group__0");
			builder.put(grammarAccess.getQueryAccess().getGroup_2(), "rule__Query__Group_2__0");
			builder.put(grammarAccess.getQueryAccess().getGroup_3(), "rule__Query__Group_3__0");
			builder.put(grammarAccess.getQueryAccess().getGroup_3_1(), "rule__Query__Group_3_1__0");
			builder.put(grammarAccess.getParamAccess().getGroup(), "rule__Param__Group__0");
			builder.put(grammarAccess.getSQLQueryAccess().getGroup(), "rule__SQLQuery__Group__0");
			builder.put(grammarAccess.getSelectAccess().getGroup(), "rule__Select__Group__0");
			builder.put(grammarAccess.getFromAccess().getGroup(), "rule__From__Group__0");
			builder.put(grammarAccess.getJoinAccess().getGroup(), "rule__Join__Group__0");
			builder.put(grammarAccess.getJoinAccess().getGroup_5(), "rule__Join__Group_5__0");
			builder.put(grammarAccess.getWhereAccess().getGroup(), "rule__Where__Group__0");
			builder.put(grammarAccess.getOrderAccess().getGroup(), "rule__Order__Group__0");
			builder.put(grammarAccess.getModelAccess().getEntitiesAssignment_0(), "rule__Model__EntitiesAssignment_0");
			builder.put(grammarAccess.getModelAccess().getRepositoriesAssignment_1(), "rule__Model__RepositoriesAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getHasUserDetailsAssignment_2_0(), "rule__Entity__HasUserDetailsAssignment_2_0");
			builder.put(grammarAccess.getEntityAccess().getAttributesAssignment_4(), "rule__Entity__AttributesAssignment_4");
			builder.put(grammarAccess.getAttributeAccess().getAssociationAssignment_0(), "rule__Attribute__AssociationAssignment_0");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_1(), "rule__Attribute__NameAssignment_1");
			builder.put(grammarAccess.getAttributeAccess().getTypeRefAssignment_3(), "rule__Attribute__TypeRefAssignment_3");
			builder.put(grammarAccess.getAttributeAccess().getModifierAssignment_4(), "rule__Attribute__ModifierAssignment_4");
			builder.put(grammarAccess.getAttributeAccess().getMappedByAssignment_5_1_0_1(), "rule__Attribute__MappedByAssignment_5_1_0_1");
			builder.put(grammarAccess.getAttributeAccess().getFetchTypeAssignment_5_1_1_1(), "rule__Attribute__FetchTypeAssignment_5_1_1_1");
			builder.put(grammarAccess.getAttributeAccess().getValidationsAssignment_5_1_2_2(), "rule__Attribute__ValidationsAssignment_5_1_2_2");
			builder.put(grammarAccess.getEntityTypeReferenceAccess().getTypeAssignment(), "rule__EntityTypeReference__TypeAssignment");
			builder.put(grammarAccess.getDataTypeReferenceAccess().getTypeAssignment(), "rule__DataTypeReference__TypeAssignment");
			builder.put(grammarAccess.getModifierAccess().getIsLOBAssignment_0(), "rule__Modifier__IsLOBAssignment_0");
			builder.put(grammarAccess.getModifierAccess().getIsTransientAssignment_1(), "rule__Modifier__IsTransientAssignment_1");
			builder.put(grammarAccess.getModifierAccess().getIsIDAssignment_2_0(), "rule__Modifier__IsIDAssignment_2_0");
			builder.put(grammarAccess.getModifierAccess().getIDGenerationTypeAssignment_2_1_1(), "rule__Modifier__IDGenerationTypeAssignment_2_1_1");
			builder.put(grammarAccess.getValidationAccess().getMinAssignment_0_1(), "rule__Validation__MinAssignment_0_1");
			builder.put(grammarAccess.getValidationAccess().getMaxAssignment_1_1(), "rule__Validation__MaxAssignment_1_1");
			builder.put(grammarAccess.getValidationAccess().getRegexAssignment_2_1(), "rule__Validation__RegexAssignment_2_1");
			builder.put(grammarAccess.getValidationAccess().getValidatorAssignment_3(), "rule__Validation__ValidatorAssignment_3");
			builder.put(grammarAccess.getRepositoryAccess().getEntityAssignment_1(), "rule__Repository__EntityAssignment_1");
			builder.put(grammarAccess.getRepositoryAccess().getQueriesAssignment_3(), "rule__Repository__QueriesAssignment_3");
			builder.put(grammarAccess.getQueryAccess().getNameAssignment_1(), "rule__Query__NameAssignment_1");
			builder.put(grammarAccess.getQueryAccess().getIsListAssignment_2_0(), "rule__Query__IsListAssignment_2_0");
			builder.put(grammarAccess.getQueryAccess().getParamsAssignment_3_1_2(), "rule__Query__ParamsAssignment_3_1_2");
			builder.put(grammarAccess.getQueryAccess().getSqlQueryAssignment_3_2(), "rule__Query__SqlQueryAssignment_3_2");
			builder.put(grammarAccess.getParamAccess().getNameAssignment_0(), "rule__Param__NameAssignment_0");
			builder.put(grammarAccess.getParamAccess().getTypeAssignment_2(), "rule__Param__TypeAssignment_2");
			builder.put(grammarAccess.getSQLQueryAccess().getSelectAssignment_0(), "rule__SQLQuery__SelectAssignment_0");
			builder.put(grammarAccess.getSQLQueryAccess().getFromAssignment_1(), "rule__SQLQuery__FromAssignment_1");
			builder.put(grammarAccess.getSQLQueryAccess().getJoinsAssignment_2(), "rule__SQLQuery__JoinsAssignment_2");
			builder.put(grammarAccess.getSQLQueryAccess().getWhereAssignment_3(), "rule__SQLQuery__WhereAssignment_3");
			builder.put(grammarAccess.getSQLQueryAccess().getOrderAssignment_4(), "rule__SQLQuery__OrderAssignment_4");
			builder.put(grammarAccess.getSelectAccess().getIsDistinctAssignment_1(), "rule__Select__IsDistinctAssignment_1");
			builder.put(grammarAccess.getSelectAccess().getClauseAssignment_3(), "rule__Select__ClauseAssignment_3");
			builder.put(grammarAccess.getFromAccess().getEntityAssignment_2(), "rule__From__EntityAssignment_2");
			builder.put(grammarAccess.getFromAccess().getAliasAssignment_3(), "rule__From__AliasAssignment_3");
			builder.put(grammarAccess.getJoinAccess().getJoinTypeAssignment_0(), "rule__Join__JoinTypeAssignment_0");
			builder.put(grammarAccess.getJoinAccess().getEntityAssignment_2(), "rule__Join__EntityAssignment_2");
			builder.put(grammarAccess.getJoinAccess().getAliasAssignment_3(), "rule__Join__AliasAssignment_3");
			builder.put(grammarAccess.getJoinAccess().getJoinConditionAssignment_5_2(), "rule__Join__JoinConditionAssignment_5_2");
			builder.put(grammarAccess.getWhereAccess().getConditionAssignment_2(), "rule__Where__ConditionAssignment_2");
			builder.put(grammarAccess.getOrderAccess().getOrderAssignment_2(), "rule__Order__OrderAssignment_2");
			builder.put(grammarAccess.getAttributeAccess().getUnorderedGroup_5_1(), "rule__Attribute__UnorderedGroup_5_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SocialRequestGrammarAccess grammarAccess;

	@Override
	protected InternalSocialRequestParser createParser() {
		InternalSocialRequestParser result = new InternalSocialRequestParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}

	public SocialRequestGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SocialRequestGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
