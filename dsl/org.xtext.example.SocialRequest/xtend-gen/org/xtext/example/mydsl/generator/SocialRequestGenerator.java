/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.socialRequest.AssociationSpecification;
import org.xtext.example.mydsl.socialRequest.Attribute;
import org.xtext.example.mydsl.socialRequest.Entity;
import org.xtext.example.mydsl.socialRequest.Modifier;
import org.xtext.example.mydsl.socialRequest.Repository;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SocialRequestGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Entity> _filter = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    for (final Entity entity : _filter) {
      String _name = entity.getName();
      String _plus = (_name + ".java");
      fsa.generateFile(_plus, this.generateEntity(entity));
    }
    Iterable<Repository> _filter_1 = Iterables.<Repository>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Repository.class);
    for (final Repository repo : _filter_1) {
      String _name_1 = repo.getEntity().getName();
      String _plus_1 = (_name_1 + ".java");
      fsa.generateFile(_plus_1, this.generateQuery(repo));
    }
  }
  
  private CharSequence generateEntity(final Entity e) {
    CharSequence output = this.generateImports(e);
    EList<Attribute> _attributes = e.getAttributes();
    for (final Attribute attr : _attributes) {
      String _string = this.generateAttribute(attr).toString();
      String _plus = (output + _string);
      output = _plus;
    }
    return output;
  }
  
  private CharSequence generateImports(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ????");
    _builder.newLine();
    _builder.append("import javax.persistence.Entity;");
    _builder.newLine();
    {
      EList<Attribute> _attributes = e.getAttributes();
      for(final Attribute attr : _attributes) {
        {
          Modifier _modifier = attr.getModifier();
          boolean _equals = Objects.equal(_modifier, "LOB");
          if (_equals) {
            _builder.append("import javax.persistence.Lob;");
            _builder.newLine();
          }
        }
        {
          Modifier _modifier_1 = attr.getModifier();
          boolean _equals_1 = Objects.equal(_modifier_1, "LOB");
          if (_equals_1) {
            _builder.append("import javax.persistence.Id;");
            _builder.newLine();
          }
        }
        {
          String _association = attr.getAssociation();
          boolean _notEquals = (!Objects.equal(_association, null));
          if (_notEquals) {
            _builder.append("import import javax.persistence.");
            String _association_1 = attr.getAssociation();
            _builder.append(_association_1);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("TODO: does not work like that, how we check if already imported");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence generateAttribute(final Attribute a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if (((!Objects.equal(a.getAssociation(), null)) && Objects.equal(a.getAssociationSpecifications(), null))) {
        _builder.append("@");
        String _association = a.getAssociation();
        _builder.append(_association);
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
      } else {
        if (((!Objects.equal(a.getAssociation(), null)) && (((Object[])Conversions.unwrapArray(a.getAssociationSpecifications(), Object.class)).length == 1))) {
          _builder.append("  // Wie soll ich das vernünftig machen. Man muss schauen ob mappedBy und");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   ");
          _builder.append("// fetchType gesetzt ist oder nur eins von beiden");
          _builder.newLine();
        } else {
          if (((!Objects.equal(a.getAssociation(), null)) && (((Object[])Conversions.unwrapArray(a.getAssociationSpecifications(), Object.class)).length == 2))) {
            _builder.append("@");
            String _association_1 = a.getAssociation();
            _builder.append(_association_1);
            _builder.append("(mappedBy = ");
            EList<AssociationSpecification> _associationSpecifications = a.getAssociationSpecifications();
            _builder.append(_associationSpecifications);
            _builder.append("\t// Wie bekomme ich hier beides. Die Reihenfolge ist egal, deswegen ist nicht bekannt welcher");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
          }
        }
      }
    }
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Arrayindex mappedBy oder fetchType enthält");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence generateQuery(final Repository r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
}
