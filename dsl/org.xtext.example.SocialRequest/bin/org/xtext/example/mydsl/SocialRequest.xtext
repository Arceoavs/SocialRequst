grammar org.xtext.example.mydsl.SocialRequest with org.eclipse.xtext.common.Terminals

generate socialRequest "http://www.xtext.org/example/mydsl/SocialRequest"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	entities+=Entity* repositories+=Repository*
;
	
Entity:
	'Entity' name=ID (hasUserDetails?='implements UserDetails')? '{'
		attributes+=Attribute+
	'}'
;

Attribute:
	(association=ASSOCIATION)? name=ID':' type=[Entity|DATA_TYPE] (modifier=Modifier)? ('{'
			(
				('mappedBy:' mappedBy=ID)? &
				('fetch:' fetchType=FETCH_TYPE)? &
				('validations {'
					validations+=Validation+
				'}')?
			)
	'}')?
;

Modifier:
	{Modifier} 'LOB' | Identification
;

Identification:
	{Identification} 'ID'('('generationType=GENERATION_TYPE')')?
;

Validation:
	'min:' (min=POSSIBLY_SIGNED_INT) | 'max:' (max=POSSIBLY_SIGNED_INT) |
	  'pattern:' regex=STRING | {Validation} 'not-null' | {Validation} 'not-blank'
;

terminal POSSIBLY_SIGNED_INT returns ecore::EBigDecimal:
	'-'?INT
;

terminal GENERATION_TYPE returns ecore::EString:
	'auto' | 'table' | 'identity' | 'sequence'
;

terminal FETCH_TYPE returns ecore::EString:
	'eager' | 'lazy'
;
	
terminal ASSOCIATION returns ecore::EString:
	'one-to-many' | 'many-to-one' | 'one-to-one' | 'many-to-many'
;

terminal DATA_TYPE returns ecore::EString:
	'String' | 'long' | 'Long' | 'float' | 'double' | 'char' | 'int' | 'boolean'
;

// Repository

Repository:
	'Repository' entity=[Entity] '{'
		queries+=Query+
	'}'
;

Query:
	'query' name=ID(isList?=': list')? ('{'
		('params {'
			params+=Param*
		'}')?
		
		(sqlQuery=SQLQuery)?
	'}')
;

Param:
	name=ID':' type=[Entity|DATA_TYPE]
;

SQLQuery:
	select=Select
	from=From
	joins+=Join*
	(where=Where)?
	(order=Order)?
;

Select:
	'SELECT' (isDistinct?='DISTINCT')? '{' clause=STRING '}'
;

From:
	'FROM {' entity=[Entity] alias=STRING '}'
;

Join:
	joinType=JOIN_TYPE '{' entity=[Entity] alias=STRING '}' ('ON {' joinCondition=STRING '}')?
;

terminal JOIN_TYPE returns ecore::EString:
	'LEFT JOIN' | 'LEFT OUTER JOIN' | 'CROSS JOIN' | 'JOIN'
;

Where:
	'WHERE {' condition=STRING '}'
;

Order:
	'ORDER BY {' order=STRING '}' 
;
