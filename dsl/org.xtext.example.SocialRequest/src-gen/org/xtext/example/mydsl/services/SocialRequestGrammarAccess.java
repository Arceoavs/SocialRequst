/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SocialRequestGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=AbstractElement+;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement+
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRepositoryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractElement:
		//	Package | Entity | Repository;
		@Override public ParserRule getRule() { return rule; }
		
		//Package | Entity | Repository
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Package
		public RuleCall getPackageParserRuleCall_0() { return cPackageParserRuleCall_0; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_1() { return cEntityParserRuleCall_1; }
		
		//Repository
		public RuleCall getRepositoryParserRuleCall_2() { return cRepositoryParserRuleCall_2; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePointSeperatedIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsAbstractElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Package:
		//	'package' name=PointSeperatedID '{'
		//	elements+=AbstractElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=PointSeperatedID '{' elements+=AbstractElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=PointSeperatedID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//PointSeperatedID
		public RuleCall getNamePointSeperatedIDParserRuleCall_1_0() { return cNamePointSeperatedIDParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_3_0() { return cElementsAbstractElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PointSeperatedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.PointSeperatedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PointSeperatedID:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cHasUserDetailsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cHasUserDetailsImplementsKeyword_2_0_0 = (Keyword)cHasUserDetailsAssignment_2_0.eContents().get(0);
		private final Keyword cUserDetailsKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesAttributeParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Entity:
		//	'Entity' name=ID (hasUserDetails?='implements' 'UserDetails')? '{'
		//	attributes+=Attribute+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Entity' name=ID (hasUserDetails?='implements' 'UserDetails')? '{' attributes+=Attribute+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(hasUserDetails?='implements' 'UserDetails')?
		public Group getGroup_2() { return cGroup_2; }
		
		//hasUserDetails?='implements'
		public Assignment getHasUserDetailsAssignment_2_0() { return cHasUserDetailsAssignment_2_0; }
		
		//'implements'
		public Keyword getHasUserDetailsImplementsKeyword_2_0_0() { return cHasUserDetailsImplementsKeyword_2_0_0; }
		
		//'UserDetails'
		public Keyword getUserDetailsKeyword_2_1() { return cUserDetailsKeyword_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//attributes+=Attribute+
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_4_0() { return cAttributesAttributeParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssociationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssociationASSOCIATIONParserRuleCall_0_0 = (RuleCall)cAssociationAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeRefTypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeRefAssignment_3.eContents().get(0);
		private final Assignment cModifierAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModifierModifierParserRuleCall_4_0 = (RuleCall)cModifierAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5_1 = (UnorderedGroup)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cUnorderedGroup_5_1.eContents().get(0);
		private final Keyword cMappedByKeyword_5_1_0_0 = (Keyword)cGroup_5_1_0.eContents().get(0);
		private final Assignment cMappedByAssignment_5_1_0_1 = (Assignment)cGroup_5_1_0.eContents().get(1);
		private final RuleCall cMappedByIDTerminalRuleCall_5_1_0_1_0 = (RuleCall)cMappedByAssignment_5_1_0_1.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cUnorderedGroup_5_1.eContents().get(1);
		private final Keyword cFetchKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cFetchTypeAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cFetchTypeFETCHTYPETerminalRuleCall_5_1_1_1_0 = (RuleCall)cFetchTypeAssignment_5_1_1_1.eContents().get(0);
		private final Group cGroup_5_1_2 = (Group)cUnorderedGroup_5_1.eContents().get(2);
		private final Keyword cValidationsKeyword_5_1_2_0 = (Keyword)cGroup_5_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1_2_1 = (Keyword)cGroup_5_1_2.eContents().get(1);
		private final Assignment cValidationsAssignment_5_1_2_2 = (Assignment)cGroup_5_1_2.eContents().get(2);
		private final RuleCall cValidationsValidationParserRuleCall_5_1_2_2_0 = (RuleCall)cValidationsAssignment_5_1_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_1_2_3 = (Keyword)cGroup_5_1_2.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Attribute:
		//	association=ASSOCIATION? name=ID ':' typeRef=TypeReference modifier=Modifier? ('{' (('mappedBy:' mappedBy=ID)? &
		//	('fetch:' fetchType=FETCHTYPE)? & ('validations' '{'
		//	validations+=Validation+
		//	'}')?)
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//association=ASSOCIATION? name=ID ':' typeRef=TypeReference modifier=Modifier? ('{' (('mappedBy:' mappedBy=ID)? &
		//('fetch:' fetchType=FETCHTYPE)? & ('validations' '{' validations+=Validation+ '}')?) '}')?
		public Group getGroup() { return cGroup; }
		
		//association=ASSOCIATION?
		public Assignment getAssociationAssignment_0() { return cAssociationAssignment_0; }
		
		//ASSOCIATION
		public RuleCall getAssociationASSOCIATIONParserRuleCall_0_0() { return cAssociationASSOCIATIONParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//typeRef=TypeReference
		public Assignment getTypeRefAssignment_3() { return cTypeRefAssignment_3; }
		
		//TypeReference
		public RuleCall getTypeRefTypeReferenceParserRuleCall_3_0() { return cTypeRefTypeReferenceParserRuleCall_3_0; }
		
		//modifier=Modifier?
		public Assignment getModifierAssignment_4() { return cModifierAssignment_4; }
		
		//Modifier
		public RuleCall getModifierModifierParserRuleCall_4_0() { return cModifierModifierParserRuleCall_4_0; }
		
		//('{' (('mappedBy:' mappedBy=ID)? & ('fetch:' fetchType=FETCHTYPE)? & ('validations' '{' validations+=Validation+ '}')?)
		//'}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//(('mappedBy:' mappedBy=ID)? & ('fetch:' fetchType=FETCHTYPE)? & ('validations' '{' validations+=Validation+ '}')?)
		public UnorderedGroup getUnorderedGroup_5_1() { return cUnorderedGroup_5_1; }
		
		//('mappedBy:' mappedBy=ID)?
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }
		
		//'mappedBy:'
		public Keyword getMappedByKeyword_5_1_0_0() { return cMappedByKeyword_5_1_0_0; }
		
		//mappedBy=ID
		public Assignment getMappedByAssignment_5_1_0_1() { return cMappedByAssignment_5_1_0_1; }
		
		//ID
		public RuleCall getMappedByIDTerminalRuleCall_5_1_0_1_0() { return cMappedByIDTerminalRuleCall_5_1_0_1_0; }
		
		//('fetch:' fetchType=FETCHTYPE)?
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }
		
		//'fetch:'
		public Keyword getFetchKeyword_5_1_1_0() { return cFetchKeyword_5_1_1_0; }
		
		//fetchType=FETCHTYPE
		public Assignment getFetchTypeAssignment_5_1_1_1() { return cFetchTypeAssignment_5_1_1_1; }
		
		//FETCHTYPE
		public RuleCall getFetchTypeFETCHTYPETerminalRuleCall_5_1_1_1_0() { return cFetchTypeFETCHTYPETerminalRuleCall_5_1_1_1_0; }
		
		//('validations' '{' validations+=Validation+ '}')?
		public Group getGroup_5_1_2() { return cGroup_5_1_2; }
		
		//'validations'
		public Keyword getValidationsKeyword_5_1_2_0() { return cValidationsKeyword_5_1_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1_2_1() { return cLeftCurlyBracketKeyword_5_1_2_1; }
		
		//validations+=Validation+
		public Assignment getValidationsAssignment_5_1_2_2() { return cValidationsAssignment_5_1_2_2; }
		
		//Validation
		public RuleCall getValidationsValidationParserRuleCall_5_1_2_2_0() { return cValidationsValidationParserRuleCall_5_1_2_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_1_2_3() { return cRightCurlyBracketKeyword_5_1_2_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}
	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.TypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeReference:
		//	EntityTypeReference | DataTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//EntityTypeReference | DataTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EntityTypeReference
		public RuleCall getEntityTypeReferenceParserRuleCall_0() { return cEntityTypeReferenceParserRuleCall_0; }
		
		//DataTypeReference
		public RuleCall getDataTypeReferenceParserRuleCall_1() { return cDataTypeReferenceParserRuleCall_1; }
	}
	public class EntityTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.EntityTypeReference");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeEntityCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeEntityIDTerminalRuleCall_0_1 = (RuleCall)cTypeEntityCrossReference_0.eContents().get(1);
		
		//EntityTypeReference:
		//	type=[Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//type=[Entity]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[Entity]
		public CrossReference getTypeEntityCrossReference_0() { return cTypeEntityCrossReference_0; }
		
		//ID
		public RuleCall getTypeEntityIDTerminalRuleCall_0_1() { return cTypeEntityIDTerminalRuleCall_0_1; }
	}
	public class DataTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.DataTypeReference");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeDataTypeEnumRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//DataTypeReference:
		//	type=DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//type=DataType
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_0() { return cTypeDataTypeEnumRuleCall_0; }
	}
	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIsLOBAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cIsLOBLOBKeyword_0_0 = (Keyword)cIsLOBAssignment_0.eContents().get(0);
		private final Assignment cIsTransientAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cIsTransientTRANSIENTKeyword_1_0 = (Keyword)cIsTransientAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cIsIDAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cIsIDIDKeyword_2_0_0 = (Keyword)cIsIDAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIDGenerationTypeAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIDGenerationTypeGENERATIONTYPETerminalRuleCall_2_1_1_0 = (RuleCall)cIDGenerationTypeAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//Modifier:
		//	isLOB?='LOB' | isTransient?='TRANSIENT' | isID?='ID' ('(' IDGenerationType=GENERATIONTYPE ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//isLOB?='LOB' | isTransient?='TRANSIENT' | isID?='ID' ('(' IDGenerationType=GENERATIONTYPE ')')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//isLOB?='LOB'
		public Assignment getIsLOBAssignment_0() { return cIsLOBAssignment_0; }
		
		//'LOB'
		public Keyword getIsLOBLOBKeyword_0_0() { return cIsLOBLOBKeyword_0_0; }
		
		//isTransient?='TRANSIENT'
		public Assignment getIsTransientAssignment_1() { return cIsTransientAssignment_1; }
		
		//'TRANSIENT'
		public Keyword getIsTransientTRANSIENTKeyword_1_0() { return cIsTransientTRANSIENTKeyword_1_0; }
		
		//isID?='ID' ('(' IDGenerationType=GENERATIONTYPE ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//isID?='ID'
		public Assignment getIsIDAssignment_2_0() { return cIsIDAssignment_2_0; }
		
		//'ID'
		public Keyword getIsIDIDKeyword_2_0_0() { return cIsIDIDKeyword_2_0_0; }
		
		//('(' IDGenerationType=GENERATIONTYPE ')')?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//IDGenerationType=GENERATIONTYPE
		public Assignment getIDGenerationTypeAssignment_2_1_1() { return cIDGenerationTypeAssignment_2_1_1; }
		
		//GENERATIONTYPE
		public RuleCall getIDGenerationTypeGENERATIONTYPETerminalRuleCall_2_1_1_0() { return cIDGenerationTypeGENERATIONTYPETerminalRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class ValidationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.Validation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cMinKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cMinAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMinPOSSIBLY_SIGNED_INTTerminalRuleCall_0_1_0 = (RuleCall)cMinAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cMaxKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMaxAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMaxPOSSIBLY_SIGNED_INTTerminalRuleCall_1_1_0 = (RuleCall)cMaxAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cPatternKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRegexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRegexSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cRegexAssignment_2_1.eContents().get(0);
		private final Assignment cValidatorAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cValidatorBASICVALIDATIONParserRuleCall_3_0 = (RuleCall)cValidatorAssignment_3.eContents().get(0);
		private final Assignment cUniqueAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cUniqueUniqueKeyword_4_0 = (Keyword)cUniqueAssignment_4.eContents().get(0);
		
		//Validation:
		//	'min:' min=POSSIBLY_SIGNED_INT | 'max:' max=POSSIBLY_SIGNED_INT |
		//	'pattern:' regex=STRING | validator=BASICVALIDATION | unique?='unique';
		@Override public ParserRule getRule() { return rule; }
		
		//'min:' min=POSSIBLY_SIGNED_INT | 'max:' max=POSSIBLY_SIGNED_INT | 'pattern:' regex=STRING | validator=BASICVALIDATION |
		//unique?='unique'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'min:' min=POSSIBLY_SIGNED_INT
		public Group getGroup_0() { return cGroup_0; }
		
		//'min:'
		public Keyword getMinKeyword_0_0() { return cMinKeyword_0_0; }
		
		//min=POSSIBLY_SIGNED_INT
		public Assignment getMinAssignment_0_1() { return cMinAssignment_0_1; }
		
		//POSSIBLY_SIGNED_INT
		public RuleCall getMinPOSSIBLY_SIGNED_INTTerminalRuleCall_0_1_0() { return cMinPOSSIBLY_SIGNED_INTTerminalRuleCall_0_1_0; }
		
		//'max:' max=POSSIBLY_SIGNED_INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'max:'
		public Keyword getMaxKeyword_1_0() { return cMaxKeyword_1_0; }
		
		//max=POSSIBLY_SIGNED_INT
		public Assignment getMaxAssignment_1_1() { return cMaxAssignment_1_1; }
		
		//POSSIBLY_SIGNED_INT
		public RuleCall getMaxPOSSIBLY_SIGNED_INTTerminalRuleCall_1_1_0() { return cMaxPOSSIBLY_SIGNED_INTTerminalRuleCall_1_1_0; }
		
		//'pattern:' regex=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//'pattern:'
		public Keyword getPatternKeyword_2_0() { return cPatternKeyword_2_0; }
		
		//regex=STRING
		public Assignment getRegexAssignment_2_1() { return cRegexAssignment_2_1; }
		
		//STRING
		public RuleCall getRegexSTRINGTerminalRuleCall_2_1_0() { return cRegexSTRINGTerminalRuleCall_2_1_0; }
		
		//validator=BASICVALIDATION
		public Assignment getValidatorAssignment_3() { return cValidatorAssignment_3; }
		
		//BASICVALIDATION
		public RuleCall getValidatorBASICVALIDATIONParserRuleCall_3_0() { return cValidatorBASICVALIDATIONParserRuleCall_3_0; }
		
		//unique?='unique'
		public Assignment getUniqueAssignment_4() { return cUniqueAssignment_4; }
		
		//'unique'
		public Keyword getUniqueUniqueKeyword_4_0() { return cUniqueUniqueKeyword_4_0; }
	}
	public class BASICVALIDATIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.BASICVALIDATION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNotNullKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNotBlankKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPastKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEmailKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//BASICVALIDATION:
		//	'NotNull' | 'NotBlank' | 'Past' | 'Email';
		@Override public ParserRule getRule() { return rule; }
		
		//'NotNull' | 'NotBlank' | 'Past' | 'Email'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'NotNull'
		public Keyword getNotNullKeyword_0() { return cNotNullKeyword_0; }
		
		//'NotBlank'
		public Keyword getNotBlankKeyword_1() { return cNotBlankKeyword_1; }
		
		//'Past'
		public Keyword getPastKeyword_2() { return cPastKeyword_2; }
		
		//'Email'
		public Keyword getEmailKeyword_3() { return cEmailKeyword_3; }
	}
	public class ASSOCIATIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.ASSOCIATION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOneToManyKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cManyToOneKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOneToOneKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cManyToManyKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//ASSOCIATION:
		//	'OneToMany' | 'ManyToOne' | 'OneToOne' | 'ManyToMany';
		@Override public ParserRule getRule() { return rule; }
		
		//'OneToMany' | 'ManyToOne' | 'OneToOne' | 'ManyToMany'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'OneToMany'
		public Keyword getOneToManyKeyword_0() { return cOneToManyKeyword_0; }
		
		//'ManyToOne'
		public Keyword getManyToOneKeyword_1() { return cManyToOneKeyword_1; }
		
		//'OneToOne'
		public Keyword getOneToOneKeyword_2() { return cOneToOneKeyword_2; }
		
		//'ManyToMany'
		public Keyword getManyToManyKeyword_3() { return cManyToManyKeyword_3; }
	}
	public class RepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.Repository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepositoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntityEntityCrossReference_1_0 = (CrossReference)cEntityAssignment_1.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cEntityEntityCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQueriesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQueriesQueryParserRuleCall_3_0 = (RuleCall)cQueriesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Repository
		//Repository:
		//	'Repository' entity=[Entity] '{'
		//	queries+=Query+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Repository' entity=[Entity] '{' queries+=Query+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Repository'
		public Keyword getRepositoryKeyword_0() { return cRepositoryKeyword_0; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_1_0() { return cEntityEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_1_0_1() { return cEntityEntityIDTerminalRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//queries+=Query+
		public Assignment getQueriesAssignment_3() { return cQueriesAssignment_3; }
		
		//Query
		public RuleCall getQueriesQueryParserRuleCall_3_0() { return cQueriesQueryParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIsListAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cIsListColonKeyword_2_0_0 = (Keyword)cIsListAssignment_2_0.eContents().get(0);
		private final Keyword cListKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cParamsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cParamsAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cParamsParamParserRuleCall_3_1_2_0 = (RuleCall)cParamsAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Assignment cSqlQueryAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cSqlQuerySQLQueryParserRuleCall_3_2_0 = (RuleCall)cSqlQueryAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Query:
		//	'query' name=ID (isList?=':' 'list')? ('{' ('params' '{'
		//	params+=Param*
		//	'}')?
		//	sqlQuery=SQLQuery?
		//	'}');
		@Override public ParserRule getRule() { return rule; }
		
		//'query' name=ID (isList?=':' 'list')? ('{' ('params' '{' params+=Param* '}')? sqlQuery=SQLQuery? '}')
		public Group getGroup() { return cGroup; }
		
		//'query'
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(isList?=':' 'list')?
		public Group getGroup_2() { return cGroup_2; }
		
		//isList?=':'
		public Assignment getIsListAssignment_2_0() { return cIsListAssignment_2_0; }
		
		//':'
		public Keyword getIsListColonKeyword_2_0_0() { return cIsListColonKeyword_2_0_0; }
		
		//'list'
		public Keyword getListKeyword_2_1() { return cListKeyword_2_1; }
		
		//('{' ('params' '{' params+=Param* '}')? sqlQuery=SQLQuery? '}')
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//('params' '{' params+=Param* '}')?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'params'
		public Keyword getParamsKeyword_3_1_0() { return cParamsKeyword_3_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1_1() { return cLeftCurlyBracketKeyword_3_1_1; }
		
		//params+=Param*
		public Assignment getParamsAssignment_3_1_2() { return cParamsAssignment_3_1_2; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_3_1_2_0() { return cParamsParamParserRuleCall_3_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_1_3() { return cRightCurlyBracketKeyword_3_1_3; }
		
		//sqlQuery=SQLQuery?
		public Assignment getSqlQueryAssignment_3_2() { return cSqlQueryAssignment_3_2; }
		
		//SQLQuery
		public RuleCall getSqlQuerySQLQueryParserRuleCall_3_2_0() { return cSqlQuerySQLQueryParserRuleCall_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeReferenceParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Param:
		//	name=ID ':' type=TypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=TypeReference
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=TypeReference
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_2_0() { return cTypeTypeReferenceParserRuleCall_2_0; }
	}
	public class SQLQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.SQLQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectSelectParserRuleCall_0_0 = (RuleCall)cSelectAssignment_0.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromFromParserRuleCall_1_0 = (RuleCall)cFromAssignment_1.eContents().get(0);
		private final Assignment cJoinsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cJoinsJoinParserRuleCall_2_0 = (RuleCall)cJoinsAssignment_2.eContents().get(0);
		private final Assignment cWhereAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWhereWhereParserRuleCall_3_0 = (RuleCall)cWhereAssignment_3.eContents().get(0);
		private final Assignment cOrderAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOrderOrderParserRuleCall_4_0 = (RuleCall)cOrderAssignment_4.eContents().get(0);
		
		//SQLQuery:
		//	select=Select
		//	from=From
		//	joins+=Join*
		//	where=Where?
		//	order=Order?;
		@Override public ParserRule getRule() { return rule; }
		
		//select=Select from=From joins+=Join* where=Where? order=Order?
		public Group getGroup() { return cGroup; }
		
		//select=Select
		public Assignment getSelectAssignment_0() { return cSelectAssignment_0; }
		
		//Select
		public RuleCall getSelectSelectParserRuleCall_0_0() { return cSelectSelectParserRuleCall_0_0; }
		
		//from=From
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }
		
		//From
		public RuleCall getFromFromParserRuleCall_1_0() { return cFromFromParserRuleCall_1_0; }
		
		//joins+=Join*
		public Assignment getJoinsAssignment_2() { return cJoinsAssignment_2; }
		
		//Join
		public RuleCall getJoinsJoinParserRuleCall_2_0() { return cJoinsJoinParserRuleCall_2_0; }
		
		//where=Where?
		public Assignment getWhereAssignment_3() { return cWhereAssignment_3; }
		
		//Where
		public RuleCall getWhereWhereParserRuleCall_3_0() { return cWhereWhereParserRuleCall_3_0; }
		
		//order=Order?
		public Assignment getOrderAssignment_4() { return cOrderAssignment_4; }
		
		//Order
		public RuleCall getOrderOrderParserRuleCall_4_0() { return cOrderOrderParserRuleCall_4_0; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsDistinctAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsDistinctDISTINCTKeyword_1_0 = (Keyword)cIsDistinctAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClauseSTRINGTerminalRuleCall_3_0 = (RuleCall)cClauseAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Select:
		//	'SELECT' isDistinct?='DISTINCT'? '{' clause=STRING '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SELECT' isDistinct?='DISTINCT'? '{' clause=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'SELECT'
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//isDistinct?='DISTINCT'?
		public Assignment getIsDistinctAssignment_1() { return cIsDistinctAssignment_1; }
		
		//'DISTINCT'
		public Keyword getIsDistinctDISTINCTKeyword_1_0() { return cIsDistinctDISTINCTKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//clause=STRING
		public Assignment getClauseAssignment_3() { return cClauseAssignment_3; }
		
		//STRING
		public RuleCall getClauseSTRINGTerminalRuleCall_3_0() { return cClauseSTRINGTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class FromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.From");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEntityEntityCrossReference_2_0 = (CrossReference)cEntityAssignment_2.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_2_0_1 = (RuleCall)cEntityEntityCrossReference_2_0.eContents().get(1);
		private final Assignment cAliasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAliasIDTerminalRuleCall_3_0 = (RuleCall)cAliasAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//From:
		//	'FROM' '{' entity=[Entity] alias=ID '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'FROM' '{' entity=[Entity] alias=ID '}'
		public Group getGroup() { return cGroup; }
		
		//'FROM'
		public Keyword getFROMKeyword_0() { return cFROMKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_2_0() { return cEntityEntityCrossReference_2_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_2_0_1() { return cEntityEntityIDTerminalRuleCall_2_0_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_3() { return cAliasAssignment_3; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_0() { return cAliasIDTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJoinTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cJoinTypeJoinTypeEnumRuleCall_0_0 = (RuleCall)cJoinTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEntityEntityCrossReference_2_0 = (CrossReference)cEntityAssignment_2.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_2_0_1 = (RuleCall)cEntityEntityCrossReference_2_0.eContents().get(1);
		private final Assignment cAliasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAliasIDTerminalRuleCall_3_0 = (RuleCall)cAliasAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cONKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cJoinConditionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cJoinConditionSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cJoinConditionAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//Join:
		//	joinType=JoinType '{' entity=[Entity] alias=ID '}' ('ON' '{' joinCondition=STRING '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//joinType=JoinType '{' entity=[Entity] alias=ID '}' ('ON' '{' joinCondition=STRING '}')?
		public Group getGroup() { return cGroup; }
		
		//joinType=JoinType
		public Assignment getJoinTypeAssignment_0() { return cJoinTypeAssignment_0; }
		
		//JoinType
		public RuleCall getJoinTypeJoinTypeEnumRuleCall_0_0() { return cJoinTypeJoinTypeEnumRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_2_0() { return cEntityEntityCrossReference_2_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_2_0_1() { return cEntityEntityIDTerminalRuleCall_2_0_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_3() { return cAliasAssignment_3; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_0() { return cAliasIDTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//('ON' '{' joinCondition=STRING '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'ON'
		public Keyword getONKeyword_5_0() { return cONKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//joinCondition=STRING
		public Assignment getJoinConditionAssignment_5_2() { return cJoinConditionAssignment_5_2; }
		
		//STRING
		public RuleCall getJoinConditionSTRINGTerminalRuleCall_5_2_0() { return cJoinConditionSTRINGTerminalRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class WhereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.Where");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHEREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionSTRINGTerminalRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Where:
		//	'WHERE' '{' condition=STRING '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'WHERE' '{' condition=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_0() { return cWHEREKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//condition=STRING
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_2_0() { return cConditionSTRINGTerminalRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class OrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.Order");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cORDERBYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOrderAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrderSTRINGTerminalRuleCall_2_0 = (RuleCall)cOrderAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Order:
		//	'ORDER BY' '{' order=STRING '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ORDER BY' '{' order=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'ORDER BY'
		public Keyword getORDERBYKeyword_0() { return cORDERBYKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//order=STRING
		public Assignment getOrderAssignment_2() { return cOrderAssignment_2; }
		
		//STRING
		public RuleCall getOrderSTRINGTerminalRuleCall_2_0() { return cOrderSTRINGTerminalRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	public class DataTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRINGStringKeyword_0_0 = (Keyword)cSTRINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLONGLongKeyword_1_0 = (Keyword)cLONGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFLOATFloatKeyword_2_0 = (Keyword)cFLOATEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDOUBLEDoubleKeyword_3_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCHAREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCHARCharKeyword_4_0 = (Keyword)cCHAREnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cINTIntKeyword_5_0 = (Keyword)cINTEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cBOOLEANBooleanKeyword_6_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDATEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDATEDateKeyword_7_0 = (Keyword)cDATEEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum DataType:
		//	STRING='String' | LONG='long' | FLOAT='float' | DOUBLE='double' | CHAR='char' | INT='int' | BOOLEAN='boolean' |
		//	DATE='Date';
		public EnumRule getRule() { return rule; }
		
		//STRING='String' | LONG='long' | FLOAT='float' | DOUBLE='double' | CHAR='char' | INT='int' | BOOLEAN='boolean' |
		//DATE='Date'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING='String'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_0() { return cSTRINGEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getSTRINGStringKeyword_0_0() { return cSTRINGStringKeyword_0_0; }
		
		//LONG='long'
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_1() { return cLONGEnumLiteralDeclaration_1; }
		
		//'long'
		public Keyword getLONGLongKeyword_1_0() { return cLONGLongKeyword_1_0; }
		
		//FLOAT='float'
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_2() { return cFLOATEnumLiteralDeclaration_2; }
		
		//'float'
		public Keyword getFLOATFloatKeyword_2_0() { return cFLOATFloatKeyword_2_0; }
		
		//DOUBLE='double'
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_3() { return cDOUBLEEnumLiteralDeclaration_3; }
		
		//'double'
		public Keyword getDOUBLEDoubleKeyword_3_0() { return cDOUBLEDoubleKeyword_3_0; }
		
		//CHAR='char'
		public EnumLiteralDeclaration getCHAREnumLiteralDeclaration_4() { return cCHAREnumLiteralDeclaration_4; }
		
		//'char'
		public Keyword getCHARCharKeyword_4_0() { return cCHARCharKeyword_4_0; }
		
		//INT='int'
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_5() { return cINTEnumLiteralDeclaration_5; }
		
		//'int'
		public Keyword getINTIntKeyword_5_0() { return cINTIntKeyword_5_0; }
		
		//BOOLEAN='boolean'
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_6() { return cBOOLEANEnumLiteralDeclaration_6; }
		
		//'boolean'
		public Keyword getBOOLEANBooleanKeyword_6_0() { return cBOOLEANBooleanKeyword_6_0; }
		
		//DATE='Date'
		public EnumLiteralDeclaration getDATEEnumLiteralDeclaration_7() { return cDATEEnumLiteralDeclaration_7; }
		
		//'Date'
		public Keyword getDATEDateKeyword_7_0() { return cDATEDateKeyword_7_0; }
	}
	public class JoinTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.JoinType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFT_JOINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFT_JOINLEFTJOINKeyword_0_0 = (Keyword)cLEFT_JOINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEFT_OUTER_JOINEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLEFT_OUTER_JOINLEFTOUTERJOINKeyword_1_0 = (Keyword)cLEFT_OUTER_JOINEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCROSS_JOINEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCROSS_JOINCROSSJOINKeyword_2_0 = (Keyword)cCROSS_JOINEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cJOINEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cJOINJOINKeyword_3_0 = (Keyword)cJOINEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum JoinType:
		//	LEFT_JOIN='LEFT JOIN' | LEFT_OUTER_JOIN='LEFT OUTER JOIN' | CROSS_JOIN='CROSS JOIN' | JOIN;
		public EnumRule getRule() { return rule; }
		
		//LEFT_JOIN='LEFT JOIN' | LEFT_OUTER_JOIN='LEFT OUTER JOIN' | CROSS_JOIN='CROSS JOIN' | JOIN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT_JOIN='LEFT JOIN'
		public EnumLiteralDeclaration getLEFT_JOINEnumLiteralDeclaration_0() { return cLEFT_JOINEnumLiteralDeclaration_0; }
		
		//'LEFT JOIN'
		public Keyword getLEFT_JOINLEFTJOINKeyword_0_0() { return cLEFT_JOINLEFTJOINKeyword_0_0; }
		
		//LEFT_OUTER_JOIN='LEFT OUTER JOIN'
		public EnumLiteralDeclaration getLEFT_OUTER_JOINEnumLiteralDeclaration_1() { return cLEFT_OUTER_JOINEnumLiteralDeclaration_1; }
		
		//'LEFT OUTER JOIN'
		public Keyword getLEFT_OUTER_JOINLEFTOUTERJOINKeyword_1_0() { return cLEFT_OUTER_JOINLEFTOUTERJOINKeyword_1_0; }
		
		//CROSS_JOIN='CROSS JOIN'
		public EnumLiteralDeclaration getCROSS_JOINEnumLiteralDeclaration_2() { return cCROSS_JOINEnumLiteralDeclaration_2; }
		
		//'CROSS JOIN'
		public Keyword getCROSS_JOINCROSSJOINKeyword_2_0() { return cCROSS_JOINCROSSJOINKeyword_2_0; }
		
		//JOIN
		public EnumLiteralDeclaration getJOINEnumLiteralDeclaration_3() { return cJOINEnumLiteralDeclaration_3; }
		
		//'JOIN'
		public Keyword getJOINJOINKeyword_3_0() { return cJOINJOINKeyword_3_0; }
	}
	
	private final ModelElements pModel;
	private final AbstractElementElements pAbstractElement;
	private final PackageElements pPackage;
	private final PointSeperatedIDElements pPointSeperatedID;
	private final EntityElements pEntity;
	private final AttributeElements pAttribute;
	private final TypeReferenceElements pTypeReference;
	private final EntityTypeReferenceElements pEntityTypeReference;
	private final DataTypeReferenceElements pDataTypeReference;
	private final ModifierElements pModifier;
	private final ValidationElements pValidation;
	private final BASICVALIDATIONElements pBASICVALIDATION;
	private final TerminalRule tPOSSIBLY_SIGNED_INT;
	private final TerminalRule tGENERATIONTYPE;
	private final TerminalRule tFETCHTYPE;
	private final ASSOCIATIONElements pASSOCIATION;
	private final DataTypeElements eDataType;
	private final RepositoryElements pRepository;
	private final QueryElements pQuery;
	private final ParamElements pParam;
	private final SQLQueryElements pSQLQuery;
	private final SelectElements pSelect;
	private final FromElements pFrom;
	private final JoinElements pJoin;
	private final JoinTypeElements eJoinType;
	private final WhereElements pWhere;
	private final OrderElements pOrder;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SocialRequestGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pPackage = new PackageElements();
		this.pPointSeperatedID = new PointSeperatedIDElements();
		this.pEntity = new EntityElements();
		this.pAttribute = new AttributeElements();
		this.pTypeReference = new TypeReferenceElements();
		this.pEntityTypeReference = new EntityTypeReferenceElements();
		this.pDataTypeReference = new DataTypeReferenceElements();
		this.pModifier = new ModifierElements();
		this.pValidation = new ValidationElements();
		this.pBASICVALIDATION = new BASICVALIDATIONElements();
		this.tPOSSIBLY_SIGNED_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.POSSIBLY_SIGNED_INT");
		this.tGENERATIONTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.GENERATIONTYPE");
		this.tFETCHTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SocialRequest.FETCHTYPE");
		this.pASSOCIATION = new ASSOCIATIONElements();
		this.eDataType = new DataTypeElements();
		this.pRepository = new RepositoryElements();
		this.pQuery = new QueryElements();
		this.pParam = new ParamElements();
		this.pSQLQuery = new SQLQueryElements();
		this.pSelect = new SelectElements();
		this.pFrom = new FromElements();
		this.pJoin = new JoinElements();
		this.eJoinType = new JoinTypeElements();
		this.pWhere = new WhereElements();
		this.pOrder = new OrderElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.SocialRequest".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=AbstractElement+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//AbstractElement:
	//	Package | Entity | Repository;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//Package:
	//	'package' name=PointSeperatedID '{'
	//	elements+=AbstractElement*
	//	'}';
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//PointSeperatedID:
	//	ID ('.' ID)*;
	public PointSeperatedIDElements getPointSeperatedIDAccess() {
		return pPointSeperatedID;
	}
	
	public ParserRule getPointSeperatedIDRule() {
		return getPointSeperatedIDAccess().getRule();
	}
	
	//Entity:
	//	'Entity' name=ID (hasUserDetails?='implements' 'UserDetails')? '{'
	//	attributes+=Attribute+
	//	'}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Attribute:
	//	association=ASSOCIATION? name=ID ':' typeRef=TypeReference modifier=Modifier? ('{' (('mappedBy:' mappedBy=ID)? &
	//	('fetch:' fetchType=FETCHTYPE)? & ('validations' '{'
	//	validations+=Validation+
	//	'}')?)
	//	'}')?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//TypeReference:
	//	EntityTypeReference | DataTypeReference;
	public TypeReferenceElements getTypeReferenceAccess() {
		return pTypeReference;
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}
	
	//EntityTypeReference:
	//	type=[Entity];
	public EntityTypeReferenceElements getEntityTypeReferenceAccess() {
		return pEntityTypeReference;
	}
	
	public ParserRule getEntityTypeReferenceRule() {
		return getEntityTypeReferenceAccess().getRule();
	}
	
	//DataTypeReference:
	//	type=DataType;
	public DataTypeReferenceElements getDataTypeReferenceAccess() {
		return pDataTypeReference;
	}
	
	public ParserRule getDataTypeReferenceRule() {
		return getDataTypeReferenceAccess().getRule();
	}
	
	//Modifier:
	//	isLOB?='LOB' | isTransient?='TRANSIENT' | isID?='ID' ('(' IDGenerationType=GENERATIONTYPE ')')?;
	public ModifierElements getModifierAccess() {
		return pModifier;
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}
	
	//Validation:
	//	'min:' min=POSSIBLY_SIGNED_INT | 'max:' max=POSSIBLY_SIGNED_INT |
	//	'pattern:' regex=STRING | validator=BASICVALIDATION | unique?='unique';
	public ValidationElements getValidationAccess() {
		return pValidation;
	}
	
	public ParserRule getValidationRule() {
		return getValidationAccess().getRule();
	}
	
	//BASICVALIDATION:
	//	'NotNull' | 'NotBlank' | 'Past' | 'Email';
	public BASICVALIDATIONElements getBASICVALIDATIONAccess() {
		return pBASICVALIDATION;
	}
	
	public ParserRule getBASICVALIDATIONRule() {
		return getBASICVALIDATIONAccess().getRule();
	}
	
	//terminal POSSIBLY_SIGNED_INT returns ecore::EBigDecimal:
	//	'-'? INT;
	public TerminalRule getPOSSIBLY_SIGNED_INTRule() {
		return tPOSSIBLY_SIGNED_INT;
	}
	
	//terminal GENERATIONTYPE:
	//	'AUTO' | 'TABLE' | 'IDENTITY' | 'SEQUENCE';
	public TerminalRule getGENERATIONTYPERule() {
		return tGENERATIONTYPE;
	}
	
	//terminal FETCHTYPE:
	//	'EAGER' | 'LAZY';
	public TerminalRule getFETCHTYPERule() {
		return tFETCHTYPE;
	}
	
	//ASSOCIATION:
	//	'OneToMany' | 'ManyToOne' | 'OneToOne' | 'ManyToMany';
	public ASSOCIATIONElements getASSOCIATIONAccess() {
		return pASSOCIATION;
	}
	
	public ParserRule getASSOCIATIONRule() {
		return getASSOCIATIONAccess().getRule();
	}
	
	//enum DataType:
	//	STRING='String' | LONG='long' | FLOAT='float' | DOUBLE='double' | CHAR='char' | INT='int' | BOOLEAN='boolean' |
	//	DATE='Date';
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//// Repository
	//Repository:
	//	'Repository' entity=[Entity] '{'
	//	queries+=Query+
	//	'}';
	public RepositoryElements getRepositoryAccess() {
		return pRepository;
	}
	
	public ParserRule getRepositoryRule() {
		return getRepositoryAccess().getRule();
	}
	
	//Query:
	//	'query' name=ID (isList?=':' 'list')? ('{' ('params' '{'
	//	params+=Param*
	//	'}')?
	//	sqlQuery=SQLQuery?
	//	'}');
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//Param:
	//	name=ID ':' type=TypeReference;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//SQLQuery:
	//	select=Select
	//	from=From
	//	joins+=Join*
	//	where=Where?
	//	order=Order?;
	public SQLQueryElements getSQLQueryAccess() {
		return pSQLQuery;
	}
	
	public ParserRule getSQLQueryRule() {
		return getSQLQueryAccess().getRule();
	}
	
	//Select:
	//	'SELECT' isDistinct?='DISTINCT'? '{' clause=STRING '}';
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//From:
	//	'FROM' '{' entity=[Entity] alias=ID '}';
	public FromElements getFromAccess() {
		return pFrom;
	}
	
	public ParserRule getFromRule() {
		return getFromAccess().getRule();
	}
	
	//Join:
	//	joinType=JoinType '{' entity=[Entity] alias=ID '}' ('ON' '{' joinCondition=STRING '}')?;
	public JoinElements getJoinAccess() {
		return pJoin;
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}
	
	//enum JoinType:
	//	LEFT_JOIN='LEFT JOIN' | LEFT_OUTER_JOIN='LEFT OUTER JOIN' | CROSS_JOIN='CROSS JOIN' | JOIN;
	public JoinTypeElements getJoinTypeAccess() {
		return eJoinType;
	}
	
	public EnumRule getJoinTypeRule() {
		return getJoinTypeAccess().getRule();
	}
	
	//Where:
	//	'WHERE' '{' condition=STRING '}';
	public WhereElements getWhereAccess() {
		return pWhere;
	}
	
	public ParserRule getWhereRule() {
		return getWhereAccess().getRule();
	}
	
	//Order:
	//	'ORDER BY' '{' order=STRING '}';
	public OrderElements getOrderAccess() {
		return pOrder;
	}
	
	public ParserRule getOrderRule() {
		return getOrderAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
