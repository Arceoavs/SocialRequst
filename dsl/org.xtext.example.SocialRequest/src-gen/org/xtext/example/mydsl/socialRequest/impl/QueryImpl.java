/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.socialRequest.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.socialRequest.Param;
import org.xtext.example.mydsl.socialRequest.Query;
import org.xtext.example.mydsl.socialRequest.SQLQuery;
import org.xtext.example.mydsl.socialRequest.SocialRequestPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Query</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.socialRequest.impl.QueryImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.socialRequest.impl.QueryImpl#isIsList <em>Is List</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.socialRequest.impl.QueryImpl#getParams <em>Params</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.socialRequest.impl.QueryImpl#getSqlQuery <em>Sql Query</em>}</li>
 * </ul>
 *
 * @generated
 */
public class QueryImpl extends MinimalEObjectImpl.Container implements Query
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #isIsList() <em>Is List</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsList()
   * @generated
   * @ordered
   */
  protected static final boolean IS_LIST_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsList() <em>Is List</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsList()
   * @generated
   * @ordered
   */
  protected boolean isList = IS_LIST_EDEFAULT;

  /**
   * The cached value of the '{@link #getParams() <em>Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParams()
   * @generated
   * @ordered
   */
  protected EList<Param> params;

  /**
   * The cached value of the '{@link #getSqlQuery() <em>Sql Query</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSqlQuery()
   * @generated
   * @ordered
   */
  protected SQLQuery sqlQuery;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QueryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SocialRequestPackage.Literals.QUERY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SocialRequestPackage.QUERY__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIsList()
  {
    return isList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsList(boolean newIsList)
  {
    boolean oldIsList = isList;
    isList = newIsList;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SocialRequestPackage.QUERY__IS_LIST, oldIsList, isList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Param> getParams()
  {
    if (params == null)
    {
      params = new EObjectContainmentEList<Param>(Param.class, this, SocialRequestPackage.QUERY__PARAMS);
    }
    return params;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SQLQuery getSqlQuery()
  {
    return sqlQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSqlQuery(SQLQuery newSqlQuery, NotificationChain msgs)
  {
    SQLQuery oldSqlQuery = sqlQuery;
    sqlQuery = newSqlQuery;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SocialRequestPackage.QUERY__SQL_QUERY, oldSqlQuery, newSqlQuery);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSqlQuery(SQLQuery newSqlQuery)
  {
    if (newSqlQuery != sqlQuery)
    {
      NotificationChain msgs = null;
      if (sqlQuery != null)
        msgs = ((InternalEObject)sqlQuery).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SocialRequestPackage.QUERY__SQL_QUERY, null, msgs);
      if (newSqlQuery != null)
        msgs = ((InternalEObject)newSqlQuery).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SocialRequestPackage.QUERY__SQL_QUERY, null, msgs);
      msgs = basicSetSqlQuery(newSqlQuery, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SocialRequestPackage.QUERY__SQL_QUERY, newSqlQuery, newSqlQuery));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SocialRequestPackage.QUERY__PARAMS:
        return ((InternalEList<?>)getParams()).basicRemove(otherEnd, msgs);
      case SocialRequestPackage.QUERY__SQL_QUERY:
        return basicSetSqlQuery(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SocialRequestPackage.QUERY__NAME:
        return getName();
      case SocialRequestPackage.QUERY__IS_LIST:
        return isIsList();
      case SocialRequestPackage.QUERY__PARAMS:
        return getParams();
      case SocialRequestPackage.QUERY__SQL_QUERY:
        return getSqlQuery();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SocialRequestPackage.QUERY__NAME:
        setName((String)newValue);
        return;
      case SocialRequestPackage.QUERY__IS_LIST:
        setIsList((Boolean)newValue);
        return;
      case SocialRequestPackage.QUERY__PARAMS:
        getParams().clear();
        getParams().addAll((Collection<? extends Param>)newValue);
        return;
      case SocialRequestPackage.QUERY__SQL_QUERY:
        setSqlQuery((SQLQuery)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SocialRequestPackage.QUERY__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SocialRequestPackage.QUERY__IS_LIST:
        setIsList(IS_LIST_EDEFAULT);
        return;
      case SocialRequestPackage.QUERY__PARAMS:
        getParams().clear();
        return;
      case SocialRequestPackage.QUERY__SQL_QUERY:
        setSqlQuery((SQLQuery)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SocialRequestPackage.QUERY__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SocialRequestPackage.QUERY__IS_LIST:
        return isList != IS_LIST_EDEFAULT;
      case SocialRequestPackage.QUERY__PARAMS:
        return params != null && !params.isEmpty();
      case SocialRequestPackage.QUERY__SQL_QUERY:
        return sqlQuery != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", isList: ");
    result.append(isList);
    result.append(')');
    return result.toString();
  }

} //QueryImpl
