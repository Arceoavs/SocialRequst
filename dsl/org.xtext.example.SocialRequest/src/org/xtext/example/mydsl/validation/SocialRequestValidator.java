/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.validation;

import java.util.ArrayList;


import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.ValidationMessageAcceptor;
import org.xtext.example.mydsl.socialRequest.Attribute;
import org.xtext.example.mydsl.socialRequest.Entity;
import org.xtext.example.mydsl.socialRequest.EntityTypeReference;
import org.xtext.example.mydsl.socialRequest.Join;
import org.xtext.example.mydsl.socialRequest.Param;
import org.xtext.example.mydsl.socialRequest.Query;
import org.xtext.example.mydsl.socialRequest.ReferenceValue;
import org.xtext.example.mydsl.socialRequest.SQLconditionpart;
import org.xtext.example.mydsl.socialRequest.SocialRequestPackage;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class SocialRequestValidator extends AbstractSocialRequestValidator {
	
    @Check
    public void checkAttributesInQueryAreCorrect(Query query) {
	    try {
//	    	System.out.println("Checking query " + query.getName());
	    	if (query.getSqlQuery() != null) {	
		    	String alias1 = query.getSqlQuery().getFrom().getAlias();
		    	Entity entity1 = query.getSqlQuery().getFrom().getEntity();
		    	
		    	ArrayList<Param> params = new ArrayList<Param>();
		    	params.addAll(query.getParams());
		    	
		    	ArrayList<Join> joins = new ArrayList<Join>();
		    	joins.addAll(query.getSqlQuery().getJoins());
		    	
		    	ArrayList<SQLconditionpart> parts = new ArrayList<SQLconditionpart>();
		    	parts.addAll(query.getSqlQuery().getWhere().getCondition().getParts());
		    	parts.addAll(query.getSqlQuery().getOrder().getClause().getParts());
		    	
		    	ArrayList<String> otherAlias = new ArrayList<String>();
		    	ArrayList<Entity> otherEntities = new ArrayList<Entity>();
		    	for(Join join : joins) {
		    		otherAlias.add(join.getAlias());
		    		otherEntities.add(join.getEntity());
		    		if (join.getJoinCondition() != null)
		    			parts.addAll(join.getJoinCondition().getParts());
		    	}
//		    	System.out.println("Parts contained in query: " + parts.size());
//				for(SQLconditionpart part : parts) {
//					System.out.println("\t" + part.getValue().getAlias() + " with attribute " + part.getValue().getAttribute());
//					System.out.println("\t" + part.getValue().getMethodAttribute());
//				}
		    	
		        for(SQLconditionpart part : parts) {
		        	ReferenceValue refVal = part.getValue();
		        	String alias = refVal.getAlias();
		        	String attribute = refVal.getAttribute();
//			        System.out.println(alias + " with attribute " + attribute);
		        	if (alias != null && !alias.contentEquals("") && !alias.isEmpty()) {
		
		    	        //System.out.println(alias.length());
		        		if(!(alias1.contentEquals(alias)) && !otherAlias.contains(alias)) {
//		        			System.out.println(otherAlias);
		        			error("Alias " + alias + " is not defined within the query", refVal.eContainer(), SocialRequestPackage.Literals.SQ_LCONDITIONPART__VALUE, 
		        					ValidationMessageAcceptor.INSIGNIFICANT_INDEX);
		        		}
		        		else if (attribute != null && !attribute.isEmpty() && !attribute.contentEquals("")){
		    				boolean matchingAttribute = false;
		        			if (alias.contentEquals(alias1)) {
		        				for(Attribute atr : entity1.getAttributes()) {
//		        					System.out.println(entity1.getName() + " attribute name: " + atr.getName() + " used name: " + attribute);
		        					matchingAttribute = atr.getName().contentEquals(attribute);
		        					//System.out.println(matchingAttribute);
		        					if (matchingAttribute) {
		        						break;
		        					}
		        				}
		        			}
		        			for(Join join : joins) {
		        				if (matchingAttribute) {
		    						break;
		    					}
		        				if (alias.contentEquals(join.getAlias())) {
		        					for(Attribute atr : join.getEntity().getAttributes()) {
//		        						System.out.println(join.getEntity().getName() + " attribute name: " + atr.getName() + " used name: " + attribute);
		            					matchingAttribute = atr.getName().contentEquals(attribute);
		            					//System.out.println(matchingAttribute);
		            					if (matchingAttribute) {
		            						break;
		            					}
		            				}
		        				}
		        			}
		        			if (!matchingAttribute) {
		        				error("Attribute " + attribute + " is not defined within the entity of the alias " + alias, refVal.eContainer(), SocialRequestPackage.Literals.SQ_LCONDITIONPART__VALUE, 
		            					ValidationMessageAcceptor.INSIGNIFICANT_INDEX);
		        			}
		        		}
		        	}
		        }
	    	}
	    } catch (Exception e) {
	    	System.out.println("Error" + e.getClass()+ "occurred with message:" + e.getMessage());
	    	e.printStackTrace();
	    }
    }
    
    @Check
    public void checkParamsAreDefinedAndUsed(Query query) {
	    try {
//	    	System.out.println("Checking query " + query.getName());
	    	if (query.getSqlQuery() != null) {	
		    	
		    	ArrayList<Param> params = new ArrayList<Param>();
		    	params.addAll(query.getParams());
		    	ArrayList<String> containesParams = new ArrayList<String>();
		    	
		    	ArrayList<Join> joins = new ArrayList<Join>();
		    	joins.addAll(query.getSqlQuery().getJoins());
		    	
		    	ArrayList<SQLconditionpart> parts = new ArrayList<SQLconditionpart>();
		    	parts.addAll(query.getSqlQuery().getWhere().getCondition().getParts());
		    	parts.addAll(query.getSqlQuery().getOrder().getClause().getParts());
		    	
		    	ArrayList<String> otherAlias = new ArrayList<String>();
		    	ArrayList<Entity> otherEntities = new ArrayList<Entity>();
		    	for(Join join : joins) {
		    		otherAlias.add(join.getAlias());
		    		otherEntities.add(join.getEntity());
		    		if (join.getJoinCondition() != null)
		    			parts.addAll(join.getJoinCondition().getParts());
		    	}
//		    	System.out.println("Parts contained in query: " + parts.size());
//				for(SQLconditionpart part : parts) {
//					System.out.println("\t" + part.getValue().getAlias() + " with attribute " + part.getValue().getAttribute());
//					System.out.println("\t" + part.getValue().getMethodAttribute());
//				}
		    	
		        for(SQLconditionpart part : parts) {
		        	ReferenceValue refVal = part.getValue();
		        	String methodAttr = refVal.getMethodAttribute();
//			        System.out.println(alias + " with attribute " + attribute);
		        	if (methodAttr != null && !methodAttr.contentEquals("") && !methodAttr.isEmpty()) {
		        		
		        		boolean methodAttributeDefined = false;
		        		for (Param param : params) {
//		        			System.out.println(param.getName() + " used name: " + methodAttr);
		        			methodAttributeDefined = param.getName().contentEquals(methodAttr);
		        			if (param.getName().contentEquals(methodAttr) && !containesParams.contains(methodAttr)) {
		                		containesParams.add(methodAttr);
		
//		            			System.out.println("add " + methodAttr);
		        			}
		        			if (methodAttributeDefined) {
		        				break;
		        			}
		        		}
		        		if (!methodAttributeDefined) {
		        			error("Attribute :" + methodAttr + " is not defined within the query", refVal.eContainer(), SocialRequestPackage.Literals.SQ_LCONDITIONPART__VALUE, 
		        					ValidationMessageAcceptor.INSIGNIFICANT_INDEX);
		        		}
		        	}
		        }
		        int i = 0;
		        for (Param param : params) {
//		        	System.out.println("Param name: " + param.getName());
		        	if (!containesParams.contains(param.getName())) {
		        		warning("Parameter " + param.getName() + " is not used within the query", param.eContainer(), SocialRequestPackage.Literals.QUERY__PARAMS, 
		    					i);
		        	}
		        	i++;
		        }
	    	}
	    } catch (Exception e) {
	    	System.out.println("Error" + e.getClass()+ "occurred with message:" + e.getMessage());
	    	e.printStackTrace();
	    }
    }
    
    @Check
    public void checkParamsAreUsedInQueryWithoutSQL(Query query) {
	    try {
//	    	System.out.println("Checking query " + query.getName());
	    	if (query.getSqlQuery() == null) {	
	    		if (query.getParams() != null) {
	    			ArrayList<Param> params = new ArrayList<Param>();
			    	params.addAll(query.getParams());
			    	int i = 0;
			    	Entity entity = null;
			    	for (Param param: params) {
			    		if (param.getType() instanceof EntityTypeReference)
				    		entity = ((EntityTypeReference) param.getType()).getType(); 
//				    	DataType data = param.getType().getData().getType();
//			    		Repository repo = (Repository) query.eContainer().eContainer().eGet(query.eContainer().eContainingFeature());
//			    		Entity returnOb = repo.getEntity();
//			    		System.out.println(returnOb.getName());
//			    		boolean usesParam = false;
//			    		for (Attribute atr : returnOb.getAttributes()) {
//			    			String name = atr.getName();
//			    			name = name.replaceFirst(name.substring(0, 1), name.toUpperCase().substring(0, 1));
//			    			System.out.println(name);
//			    			if (data != null && query.getName().contains(name) && atr.getTypeRef().getData() != null && atr.getTypeRef().getData().getType().getDeclaringClass() == data.getDeclaringClass()) {
//			    				usesParam = true;
//			    				break;
//			    			}
//			    		}
			    		if (entity != null && !query.getName().contains(entity.getName())) //|| (data != null && !usesParam))
			    			error("Parameter " + param.getName() + " is not used within the query", param.eContainer(), SocialRequestPackage.Literals.QUERY__PARAMS, 
			    					i);
			    		i++;
			    	}
	    		}
	    	}
	    } catch (Exception e) {
	    	System.out.println("Error" + e.getClass()+ "occurred with message:" + e.getMessage());
	    	e.printStackTrace();
	    }
    }
    
    
}
